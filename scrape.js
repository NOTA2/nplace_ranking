import { createRequire } from "module";
const require = createRequire(import.meta.url);
const axios = require('axios');
const cheerio = require('cheerio');
const fs = require('fs');
const _ = require('lodash');
const puppeteer = require('puppeteer');
import { GoogleSpreadsheet } from 'google-spreadsheet';
import { JWT } from 'google-auth-library'
import path from 'path';
const __dirname = path.resolve();

// local 테스트용
// const searchItems = [{
//     "myPlace": "엘바노헤어 오산궐동점",
//     "lastUpdateTime": "2024-08-22T14:04:18.051Z",
//     "keywords": ["오산미용실", "오산대역미용실","궐동미용실","세교미용실"]
// },{
//     "myPlace": "엘바노헤어 오산대역점",
//     "lastUpdateTime": "2024-08-22T14:03:02.650Z",
//     "keywords": ["오산미용실", "오산대역미용실","궐동미용실","세교미용실"]
// }]

const searchItems = [];

const proxyServers = ['182.66.93.221:80',
    '116.101.22.249:10042',
    '89.145.162.81:3128',
    '82.67.23.158:80',
    '43.134.121.40:3128',
    '194.182.187.78:3128',
    '135.148.100.78:48149',
    '160.86.242.23:8080',
    '82.102.10.253:80',
    '182.66.93.222:80',
    '67.43.236.22:22079',
    '67.43.227.228:23737',
    '198.49.68.80:80',
    '154.65.39.8:80',
    '77.232.128.191:80',
    '15.204.161.192:18080',
    '72.10.164.178:1417',
    '72.10.160.172:9739',
    '182.66.93.220:80',
    '122.184.121.207:80',
    '182.66.93.219:80',
    '182.66.93.223:80',
    '72.10.160.171:10095',
    '67.43.227.227:11023',
    '184.191.162.4:3128',
    '47.251.43.115:33333',
    '72.10.160.170:2657',
    '162.223.90.130:80',
    '148.251.248.244:80',
    '198.44.255.3:80',
    '67.43.227.230:4961',
    '181.188.27.162:8080',
    '67.43.227.226:30373',
    '58.187.162.240:1001',
    '67.43.228.250:26991',
    '14.224.147.249:8080',
    '84.255.40.228:8998',
    '140.238.243.243:2083',
    '45.189.117.198:999',
    '103.130.106.153:83',
    '181.41.194.186:80',
    '139.59.1.14:8080',
    '67.43.236.19:17293',
    '78.28.152.113:80',
    '49.245.96.145:80',
    '133.18.234.13:80',
    '47.252.29.28:11222',
    '116.203.28.43:80',
    '189.240.60.169:9090',
    '116.125.141.115:80',
    '87.248.129.26:80',
    '154.65.39.7:80',
    '154.208.10.126:80',
    '179.41.8.151:80',
    '190.152.5.17:39888',
    '93.177.67.178:80',
    '8.219.97.248:80',
    '154.203.132.49:8080',
    '194.182.178.90:3128',
    '164.163.185.204:80',
    '35.185.196.38:3128',
    '51.89.14.70:80',
    '159.65.77.168:8585',
    '123.30.154.171:7777',
    '47.242.47.64:8888',
    '46.47.197.210:3128',
    '190.103.177.131:80',
    '51.89.255.67:80',
    '157.7.200.65:80',
    '64.227.38.36:81',
    '50.174.7.162:80',
    '195.23.57.78:80',
    '50.168.72.116:80',
    '50.144.166.226:80',
    '50.171.122.30:80',
    '50.168.72.122:80',
    '190.58.248.86:80',
    '50.207.199.80:80',
    '50.218.224.35:80',
    '50.172.75.124:80',
    '50.168.72.119:80',
    '50.174.145.15:80',
    '50.207.199.85:80',
    '50.172.75.121:80',
    '32.223.6.94:80',
    '50.172.39.98:80',
    '50.172.75.125:80',
    '211.128.96.206:80',
    '50.172.75.126:80',
    '50.172.75.123:80',
    '68.185.57.66:80',
    '50.144.76.218:80',
    '50.145.24.179:80',
    '50.172.75.114:80',
    '50.239.72.17:80',
    '50.231.110.26:80',
    '50.218.208.10:80',
    '50.144.76.222:80',
    '50.171.207.89:80',
    '50.223.239.162:80',
    '50.173.22.16:80',
    '50.168.72.114:80',
    '50.168.72.113:80',
    '50.239.72.16:80',
    '20.111.54.16:8123',
    '5.59.145.129:8080',
    '187.1.181.124:23500',
    '185.80.128.201:3128',
    '114.130.153.58:58080',
    '181.78.13.67:999',
    '45.119.133.6:3128',
    '209.121.164.50:31147',
    '43.153.208.148:3128',
    '87.247.186.40:1080',
    '67.43.236.18:1853',
    '68.178.203.69:8899',
    '23.247.136.245:80',
    '50.169.37.50:80',
    '50.174.145.13:80',
    '114.129.2.82:8081',
    '188.40.59.208:3128',
    '47.74.152.29:8888',
    '50.223.239.183:80',
    '50.172.75.127:80',
    '50.217.226.41:80',
    '50.145.24.180:80',
    '50.231.172.74:80',
    '50.223.239.177:80',
    '50.223.239.168:80',
    '50.171.187.51:80',
    '82.119.96.254:80',
    '50.223.242.100:80',
    '50.218.57.69:80',
    '50.223.242.97:80',
    '50.218.57.67:80',
    '189.202.188.149:80',
    '50.122.86.118:80',
    '50.172.75.122:80',
    '50.172.75.120:80',
    '66.191.31.158:80',
    '41.207.187.178:80',
    '20.24.43.214:80',
    '50.145.24.186:80',
    '50.218.224.38:80',
    '50.223.242.90:80',
    '50.218.224.32:80',
    '50.223.239.189:80',
    '50.174.7.153:80',
    '50.174.7.156:80',
    '50.168.72.117:80',
    '50.217.226.45:80',
    '50.174.7.157:80',
    '50.239.72.18:80',
    '50.223.239.179:80',
    '50.217.226.47:80',
    '50.207.199.84:80',
    '50.207.199.81:80',
    '84.39.112.144:3128',
    '50.217.226.40:80',
    '127.0.0.7:80',
    '50.168.7.250:80',
    '50.174.7.159:80',
    '195.159.124.56:85',
    '177.43.72.250:3128',
    '45.233.67.210:999',
    '191.97.3.210:9992',
    '38.183.144.108:8080',
    '47.251.70.179:80',
    '197.255.126.69:80',
    '50.223.246.237:80',
    '50.223.239.194:80',
    '50.207.199.86:80',
    '50.218.57.66:80',
    '0.0.0.0:80',
    '50.174.145.9:80',
    '50.239.72.19:80',
    '50.174.145.11:80',
    '93.127.215.97:80',
    '50.231.104.58:80',
    '50.207.199.87:80',
    '50.223.239.171:80',
    '50.223.239.165:80',
    '38.183.209.33:8080',
    '103.189.249.194:1111',
    '38.45.246.210:999',
    '20.169.241.111:3128',
    '182.253.112.194:8080',
    '181.115.67.3:999',
    '103.245.16.35:8080',
    '72.10.160.93:13931',
    '192.18.151.166:8888',
    '148.72.140.24:30127',
    '154.203.132.55:8090',
    '50.217.226.44:80',
    '50.218.57.68:80',
    '50.145.24.181:80',
    '50.145.24.176:80',
    '50.207.199.82:80',
    '50.207.199.83:80',
    '50.168.72.115:80',
    '122.200.19.98:80',
    '103.145.149.36:8080',
    '103.122.0.115:8181',
    '103.165.138.234:8080',
    '103.149.194.30:32650',
    '103.154.179.52:8080',
    '186.65.106.90:2020',
    '193.192.124.74:8080',
    '50.174.7.154:80',
    '38.54.71.67:80',
    '50.174.145.14:80',
    '24.205.201.186:80',
    '50.221.230.186:80',
    '50.220.168.134:80',
    '50.223.239.174:80',
    '50.217.226.43:80',
    '50.174.145.8:80',
    '212.248.95.26:6565',
    '103.131.18.194:8080',
    '103.143.168.254:84',
    '38.172.128.25:8080',
    '109.205.126.6:8080',
    '95.161.194.74:8090',
    '47.56.110.204:8989',
    '209.97.150.167:3128',
    '139.162.78.109:8080',
    '35.215.216.90:80',
    '188.166.56.246:80',
    '148.72.165.7:30127',
    '43.132.124.11:3128',
    '74.208.245.106:8888',
    '171.244.60.55:8080',
    '157.20.218.202:8080',
    '115.245.181.54:23500',
    '202.51.199.100:8080',
    '103.143.168.130:84',
    '114.130.153.46:58080',
    '188.166.229.121:80',
    '154.94.5.241:7001',
    '79.143.177.29:21972',
    '27.74.198.160:4000',
    '78.28.152.111:80',
    '182.72.203.255:80',
    '8.148.22.214:9098',
    '160.202.42.156:80',
    '15.235.171.220:3128',
    '171.6.165.79:8080',
    '103.76.109.50:3127',
    '36.91.135.141:40',
    '178.128.113.118:23128',
    '20.206.106.192:8123',
    '139.60.209.2:80',
    '83.148.75.16:3128',
    '203.150.113.63:8080',
    '103.54.43.131:8080',
    '15.235.171.221:8888',
    '58.136.238.61:8080',
    '36.88.102.63:80',
    '79.174.12.190:80',
    '86.57.251.210:3128',
    '82.146.37.145:80',
    '62.72.29.174:80',
    '207.148.71.74:80',
    '5.161.103.41:88',
    '217.160.99.39:80',
    '201.222.50.218:80',
    '116.105.57.43:10001',
    '185.217.143.96:80',
    '195.114.209.50:80',
    '50.218.57.71:80',
    '51.210.214.28:80',
    '62.72.56.132:80',
    '189.240.60.171:9090',
    '97.74.87.226:80',
    '51.195.40.90:80',
    '89.221.215.128:80',
    '156.239.49.237:3128',
    '193.233.82.254:8085',
    '184.174.24.136:6712',
    '104.239.13.123:6752',
    '104.165.169.239:3128',
    '193.36.172.140:6223',
    '154.202.112.88:3128',
    '154.202.114.228:3128',
    '154.202.116.122:3128',
    '154.202.127.114:3128',
    '104.239.104.177:6401',
    '45.39.72.124:3128',
    '154.202.126.246:3128',
    '154.202.99.97:3128',
    '154.202.107.72:3128',
    '156.239.49.122:3128',
    '156.239.55.103:3128',
    '156.239.53.146:3128',
    '104.165.127.247:3128',
    '104.239.42.75:6100',
    '154.202.116.136:3128',
    '104.207.44.61:3128',
    '104.207.32.137:3128',
    '85.239.58.16:8085',
];

async function scraper(myPlace, keyword, result) {
    try {
        console.log(`=============${keyword}=============`)
        /**
         * data Rank
         */
        const dataResponse = await axios.get(encodeURI(`https://map.naver.com/p/api/search/allSearch?query=${keyword}&type=all&searchCoord=`));
        const dataRanks = _.map(dataResponse.data.result.place.list, item => {
          return {
              index: item.index,
              rank: item.rank,
              name: item.name
          }
        })

        /**
         * view Rank
         */
        const proxyServer = _.shuffle(proxyServers)

        const browser = await puppeteer.launch({
            args: [
                '--lang=ko-KR,ko',
                `--no-sandbox`,
                `--disable-setuid-sandbox`,
                `--proxy-server=${proxyServer}`
            ]
        });
        const page = await browser.newPage();
        await page.goto(encodeURI(`https://pcmap.place.naver.com/place/list?query=${keyword}`));

        await page.waitForSelector(`.place_ad_label_icon`, {timeout: 5_000})
            .catch(() => console.log(keyword + ' is no ad'));

        const content = await page.content();
        console.log(content)
        const $ = cheerio.load(content);

        const viewData = $('#_pcmap_list_scroll_container > ul > li')
        const viewRanks = [];

        for (let i = 0; i < viewData.length; i++) {
            viewRanks.push({
                rank: i + 1,
                isAd: $(viewData[i]).find(`.place_ad_label_icon`).length > 0,
                name: $(viewData[i]).find('a > div:nth-child(1) > div > span:nth-child(1)').text()
            })
        }

        console.log(dataRanks)
        console.log(viewRanks)

        result.keywords.push({
            name: keyword,
            dataRank: _.find(dataRanks, (dataRank) => {
                return _.includes(dataRank.name, myPlace);
            })?.rank,
            viewRankWithAd: _.find(viewRanks, (viewRank) => {
                return _.includes(viewRank.name, myPlace);
            })?.rank,
            viewAdCount: $(viewData).find(`.place_ad_label_icon`).length
        });

        await fs.writeFileSync(path.join(__dirname + '/json', myPlace + '.json'), JSON.stringify(result, null, 4));

        await page.close();
        await browser.close();
    } catch (error) {
        console.error('An error occurred during scraping:', error);
    }
}

async function startScraping() {
    for (const searchItem of searchItems) {
        const result = {
            myPlace: searchItem.myPlace,
            lastUpdateTime: new Date(),
            keywords: []
        };
        console.log(`=============${searchItem.myPlace}=============`)
        // 검색어 순차적으로 실행하기
        for (const keyword of searchItem.keywords) {
            await scraper(searchItem.myPlace, keyword, result);
            await delay(2000); // 2초 대기
        }
    }
}

async function getSearchItem() {
    const serviceAccountAuth = new JWT({
        // email: credentials.client_email,
        // key: credentials.private_key,
        email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
        key: process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, "\n"),
        scopes: [
            'https://www.googleapis.com/auth/spreadsheets.readonly',
        ],
    });

    const doc = new GoogleSpreadsheet('1swKGQKrItJ7J4Use_A5QqmSxbbov4dQp_A_88ya4JsE', serviceAccountAuth);

    await doc.loadInfo(); // loads document properties and worksheets
    const sheet = doc.sheetsByIndex[0]; // or use `doc.sheetsById[id]` or `doc.sheetsByTitle[title]`
    const rows = await sheet.getRows();
    rows.forEach(row => {
        searchItems.push({
            myPlace: row.get('내 가게'),
            keywords: _.tail(row._rawData)
        })
    })

    await fs.writeFileSync(path.join(__dirname + '/json', 'myPlace.json'), JSON.stringify(searchItems.map(s => s.myPlace), null, 4));
}

function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

(async function() {
    await getSearchItem();
    await startScraping();
}());
